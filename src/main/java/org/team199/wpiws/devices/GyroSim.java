// PLEASE DO NOT EDIT THIS FILE!!!
// This file is auto-generated by https://github.com/DeepBlueRobotics/WPIWebSocketsTemplate
// To regenerate please run:
// 'ag -o "WebotsWebSocketsImpl/src/main/org/team199/wpiws/devices" "<path/to/wpilib-ws.yaml>" "https://github.com/DeepBlueRobotics/WPIWebSocketsTemplate.git"'
package org.team199.wpiws.devices;

import java.util.HashMap;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

import org.team199.wpiws.ScopedObject;
import org.team199.wpiws.StateDevice;
import org.team199.wpiws.connection.ConnectionProcessor;
import org.team199.wpiws.connection.WSValue;
import org.team199.wpiws.interfaces.*;

public class GyroSim extends StateDevice<GyroSim.State> {

    private static final CopyOnWriteArrayList<String> INITIALIZED_DEVICES = new CopyOnWriteArrayList<>();
    private static final CopyOnWriteArrayList<BooleanCallback> STATIC_INITIALIZED_CALLBACKS = new CopyOnWriteArrayList<>();
    
    private static final HashMap<String, GyroSim.State> STATE_MAP = new HashMap<>();

    public GyroSim(String id) {
        super(id, STATE_MAP);
    }
    
    public static ScopedObject<BooleanCallback> registerStaticInitializedCallback(BooleanCallback callback, boolean initialNotify) {
        STATIC_INITIALIZED_CALLBACKS.addIfAbsent(callback);
        if(initialNotify) {
            INITIALIZED_DEVICES.forEach(device -> callback.callback(device, true));
        }
        return new ScopedObject<>(callback, CANCEL_STATIC_INITIALIZED_CALLBACK);
    }

    public static final Consumer<BooleanCallback> CANCEL_STATIC_INITIALIZED_CALLBACK = GyroSim::cancelStaticInitializedCallback;
    public static void cancelStaticInitializedCallback(BooleanCallback callback) {
        STATIC_INITIALIZED_CALLBACKS.remove(callback);
    }
    
    public ScopedObject<BooleanCallback> registerInitializedCallback(BooleanCallback callback, boolean initialNotify) {
        getState().INITIALIZED_CALLBACKS.addIfAbsent(callback);
        if(initialNotify) {
            callback.callback(id, getState().init);
        }
        return new ScopedObject<>(callback, CANCEL_INITIALIZED_CALLBACK);
    }

    public final Consumer<BooleanCallback> CANCEL_INITIALIZED_CALLBACK = this::cancelInitializedCallback;
    public void cancelInitializedCallback(BooleanCallback callback) {
        getState().INITIALIZED_CALLBACKS.remove(callback);
    }

    public boolean getInitialized() {
        return getState().init;
    }

    public void setInitialized(boolean initialized) {
        setInitialized(initialized, true);
    }

    public final Consumer<BooleanCallback> CALL_INITIALIZED_CALLBACK = callback -> callback.callback(id, getState().init);
    private void setInitialized(boolean initialized, boolean notifyRobot) {
        getState().init = initialized;
        if(initialized) {
            STATIC_INITIALIZED_CALLBACKS.forEach(CALL_INITIALIZED_CALLBACK);
            getState().INITIALIZED_CALLBACKS.forEach(CALL_INITIALIZED_CALLBACK);
            INITIALIZED_DEVICES.addIfAbsent(id);
        } else {
            INITIALIZED_DEVICES.remove(id);
        }
        if(notifyRobot) {
            ConnectionProcessor.brodcastMessage(id, "Gyro", new WSValue("<init", initialized));
        }
    }

    public static String[] enumerateDevices() {
        return INITIALIZED_DEVICES.toArray(CREATE_STRING_ARRAY);
    }
    
    @Override
    protected State generateState() {
        return new State();
    }
    
    public ScopedObject<DoubleCallback> registerRangeCallback(DoubleCallback callback, boolean initialNotify) {
        getState().RANGE_CALLBACKS.addIfAbsent(callback);
        if(initialNotify) {
            callback.callback(id, getState().range);
        }
        return new ScopedObject<>(callback, CANCEL_RANGE_CALLBACK);
    }

    public final Consumer<DoubleCallback> CANCEL_RANGE_CALLBACK = this::cancelRangeCallback;
    public void cancelRangeCallback(DoubleCallback callback) {
        getState().RANGE_CALLBACKS.remove(callback);
    }

    public double getRange() {
        return getState().range;
    }

    public void setRange(double range) {
        setRange(range, true);
    }

    public final Consumer<DoubleCallback> CALL_RANGE_CALLBACK = callback -> callback.callback(id, getState().range);
    private void setRange(double range, boolean notifyRobot) {
        if(range != getState().range) {
            getState().range = range;
            getState().RANGE_CALLBACKS.forEach(CALL_RANGE_CALLBACK);
        }
        if(notifyRobot) {
            ConnectionProcessor.brodcastMessage(id, "Gyro", new WSValue("<range", range));
        }
    }

    public ScopedObject<BooleanCallback> registerConnectedCallback(BooleanCallback callback, boolean initialNotify) {
        getState().CONNECTED_CALLBACKS.addIfAbsent(callback);
        if(initialNotify) {
            callback.callback(id, getState().connected);
        }
        return new ScopedObject<>(callback, CANCEL_CONNECTED_CALLBACK);
    }

    public final Consumer<BooleanCallback> CANCEL_CONNECTED_CALLBACK = this::cancelConnectedCallback;
    public void cancelConnectedCallback(BooleanCallback callback) {
        getState().CONNECTED_CALLBACKS.remove(callback);
    }

    public boolean getConnected() {
        return getState().connected;
    }

    public void setConnected(boolean connected) {
        setConnected(connected, true);
    }

    public final Consumer<BooleanCallback> CALL_CONNECTED_CALLBACK = callback -> callback.callback(id, getState().connected);
    private void setConnected(boolean connected, boolean notifyRobot) {
        if(connected != getState().connected) {
            getState().connected = connected;
            getState().CONNECTED_CALLBACKS.forEach(CALL_CONNECTED_CALLBACK);
        }
        if(notifyRobot) {
            ConnectionProcessor.brodcastMessage(id, "Gyro", new WSValue(">connected", connected));
        }
    }

    public ScopedObject<DoubleCallback> registerAngleXCallback(DoubleCallback callback, boolean initialNotify) {
        getState().ANGLEX_CALLBACKS.addIfAbsent(callback);
        if(initialNotify) {
            callback.callback(id, getState().anglex);
        }
        return new ScopedObject<>(callback, CANCEL_ANGLEX_CALLBACK);
    }

    public final Consumer<DoubleCallback> CANCEL_ANGLEX_CALLBACK = this::cancelAngleXCallback;
    public void cancelAngleXCallback(DoubleCallback callback) {
        getState().ANGLEX_CALLBACKS.remove(callback);
    }

    public double getAngleX() {
        return getState().anglex;
    }

    public void setAngleX(double anglex) {
        setAngleX(anglex, true);
    }

    public final Consumer<DoubleCallback> CALL_ANGLEX_CALLBACK = callback -> callback.callback(id, getState().anglex);
    private void setAngleX(double anglex, boolean notifyRobot) {
        if(anglex != getState().anglex) {
            getState().anglex = anglex;
            getState().ANGLEX_CALLBACKS.forEach(CALL_ANGLEX_CALLBACK);
        }
        if(notifyRobot) {
            ConnectionProcessor.brodcastMessage(id, "Gyro", new WSValue(">angle_x", anglex));
        }
    }

    public ScopedObject<DoubleCallback> registerAngleYCallback(DoubleCallback callback, boolean initialNotify) {
        getState().ANGLEY_CALLBACKS.addIfAbsent(callback);
        if(initialNotify) {
            callback.callback(id, getState().angley);
        }
        return new ScopedObject<>(callback, CANCEL_ANGLEY_CALLBACK);
    }

    public final Consumer<DoubleCallback> CANCEL_ANGLEY_CALLBACK = this::cancelAngleYCallback;
    public void cancelAngleYCallback(DoubleCallback callback) {
        getState().ANGLEY_CALLBACKS.remove(callback);
    }

    public double getAngleY() {
        return getState().angley;
    }

    public void setAngleY(double angley) {
        setAngleY(angley, true);
    }

    public final Consumer<DoubleCallback> CALL_ANGLEY_CALLBACK = callback -> callback.callback(id, getState().angley);
    private void setAngleY(double angley, boolean notifyRobot) {
        if(angley != getState().angley) {
            getState().angley = angley;
            getState().ANGLEY_CALLBACKS.forEach(CALL_ANGLEY_CALLBACK);
        }
        if(notifyRobot) {
            ConnectionProcessor.brodcastMessage(id, "Gyro", new WSValue(">angle_y", angley));
        }
    }

    public ScopedObject<DoubleCallback> registerAngleZCallback(DoubleCallback callback, boolean initialNotify) {
        getState().ANGLEZ_CALLBACKS.addIfAbsent(callback);
        if(initialNotify) {
            callback.callback(id, getState().anglez);
        }
        return new ScopedObject<>(callback, CANCEL_ANGLEZ_CALLBACK);
    }

    public final Consumer<DoubleCallback> CANCEL_ANGLEZ_CALLBACK = this::cancelAngleZCallback;
    public void cancelAngleZCallback(DoubleCallback callback) {
        getState().ANGLEZ_CALLBACKS.remove(callback);
    }

    public double getAngleZ() {
        return getState().anglez;
    }

    public void setAngleZ(double anglez) {
        setAngleZ(anglez, true);
    }

    public final Consumer<DoubleCallback> CALL_ANGLEZ_CALLBACK = callback -> callback.callback(id, getState().anglez);
    private void setAngleZ(double anglez, boolean notifyRobot) {
        if(anglez != getState().anglez) {
            getState().anglez = anglez;
            getState().ANGLEZ_CALLBACKS.forEach(CALL_ANGLEZ_CALLBACK);
        }
        if(notifyRobot) {
            ConnectionProcessor.brodcastMessage(id, "Gyro", new WSValue(">angle_z", anglez));
        }
    }

    public ScopedObject<DoubleCallback> registerRateXCallback(DoubleCallback callback, boolean initialNotify) {
        getState().RATEX_CALLBACKS.addIfAbsent(callback);
        if(initialNotify) {
            callback.callback(id, getState().ratex);
        }
        return new ScopedObject<>(callback, CANCEL_RATEX_CALLBACK);
    }

    public final Consumer<DoubleCallback> CANCEL_RATEX_CALLBACK = this::cancelRateXCallback;
    public void cancelRateXCallback(DoubleCallback callback) {
        getState().RATEX_CALLBACKS.remove(callback);
    }

    public double getRateX() {
        return getState().ratex;
    }

    public void setRateX(double ratex) {
        setRateX(ratex, true);
    }

    public final Consumer<DoubleCallback> CALL_RATEX_CALLBACK = callback -> callback.callback(id, getState().ratex);
    private void setRateX(double ratex, boolean notifyRobot) {
        if(ratex != getState().ratex) {
            getState().ratex = ratex;
            getState().RATEX_CALLBACKS.forEach(CALL_RATEX_CALLBACK);
        }
        if(notifyRobot) {
            ConnectionProcessor.brodcastMessage(id, "Gyro", new WSValue(">rate_x", ratex));
        }
    }

    public ScopedObject<DoubleCallback> registerRateYCallback(DoubleCallback callback, boolean initialNotify) {
        getState().RATEY_CALLBACKS.addIfAbsent(callback);
        if(initialNotify) {
            callback.callback(id, getState().ratey);
        }
        return new ScopedObject<>(callback, CANCEL_RATEY_CALLBACK);
    }

    public final Consumer<DoubleCallback> CANCEL_RATEY_CALLBACK = this::cancelRateYCallback;
    public void cancelRateYCallback(DoubleCallback callback) {
        getState().RATEY_CALLBACKS.remove(callback);
    }

    public double getRateY() {
        return getState().ratey;
    }

    public void setRateY(double ratey) {
        setRateY(ratey, true);
    }

    public final Consumer<DoubleCallback> CALL_RATEY_CALLBACK = callback -> callback.callback(id, getState().ratey);
    private void setRateY(double ratey, boolean notifyRobot) {
        if(ratey != getState().ratey) {
            getState().ratey = ratey;
            getState().RATEY_CALLBACKS.forEach(CALL_RATEY_CALLBACK);
        }
        if(notifyRobot) {
            ConnectionProcessor.brodcastMessage(id, "Gyro", new WSValue(">rate_y", ratey));
        }
    }

    public ScopedObject<DoubleCallback> registerRateZCallback(DoubleCallback callback, boolean initialNotify) {
        getState().RATEZ_CALLBACKS.addIfAbsent(callback);
        if(initialNotify) {
            callback.callback(id, getState().ratez);
        }
        return new ScopedObject<>(callback, CANCEL_RATEZ_CALLBACK);
    }

    public final Consumer<DoubleCallback> CANCEL_RATEZ_CALLBACK = this::cancelRateZCallback;
    public void cancelRateZCallback(DoubleCallback callback) {
        getState().RATEZ_CALLBACKS.remove(callback);
    }

    public double getRateZ() {
        return getState().ratez;
    }

    public void setRateZ(double ratez) {
        setRateZ(ratez, true);
    }

    public final Consumer<DoubleCallback> CALL_RATEZ_CALLBACK = callback -> callback.callback(id, getState().ratez);
    private void setRateZ(double ratez, boolean notifyRobot) {
        if(ratez != getState().ratez) {
            getState().ratez = ratez;
            getState().RATEZ_CALLBACKS.forEach(CALL_RATEZ_CALLBACK);
        }
        if(notifyRobot) {
            ConnectionProcessor.brodcastMessage(id, "Gyro", new WSValue(">rate_z", ratez));
        }
    }

    public static void processMessage(String device, List<WSValue> data) {
        GyroSim simDevice = new GyroSim(device);
        for(WSValue value: data) {
            simDevice.processValue(value);
        }
    }

    private final BiConsumer<Boolean, Boolean> SET_INITIALIZED = this::setInitialized;
    private final BiConsumer<Double, Boolean> SET_RANGE = this::setRange;
    private final BiConsumer<Boolean, Boolean> SET_CONNECTED = this::setConnected;
    private final BiConsumer<Double, Boolean> SET_ANGLEX = this::setAngleX;
    private final BiConsumer<Double, Boolean> SET_ANGLEY = this::setAngleY;
    private final BiConsumer<Double, Boolean> SET_ANGLEZ = this::setAngleZ;
    private final BiConsumer<Double, Boolean> SET_RATEX = this::setRateX;
    private final BiConsumer<Double, Boolean> SET_RATEY = this::setRateY;
    private final BiConsumer<Double, Boolean> SET_RATEZ = this::setRateZ;
    private void processValue(WSValue value) {
        if(value.getKey() instanceof String && value.getValue() != null) {
            switch((String)value.getKey()) {
                case "<init": {
                    filterMessageAndIgnoreRobotState(value.getValue(), Boolean.class, SET_INITIALIZED);
                    break;
                }
                case "<range": {
                    filterMessageAndIgnoreRobotState(value.getValue(), Double.class, SET_RANGE);
                    break;
                }
                case ">connected": {
                    filterMessageAndIgnoreRobotState(value.getValue(), Boolean.class, SET_CONNECTED);
                    break;
                }
                case ">angle_x": {
                    filterMessageAndIgnoreRobotState(value.getValue(), Double.class, SET_ANGLEX);
                    break;
                }
                case ">angle_y": {
                    filterMessageAndIgnoreRobotState(value.getValue(), Double.class, SET_ANGLEY);
                    break;
                }
                case ">angle_z": {
                    filterMessageAndIgnoreRobotState(value.getValue(), Double.class, SET_ANGLEZ);
                    break;
                }
                case ">rate_x": {
                    filterMessageAndIgnoreRobotState(value.getValue(), Double.class, SET_RATEX);
                    break;
                }
                case ">rate_y": {
                    filterMessageAndIgnoreRobotState(value.getValue(), Double.class, SET_RATEY);
                    break;
                }
                case ">rate_z": {
                    filterMessageAndIgnoreRobotState(value.getValue(), Double.class, SET_RATEZ);
                    break;
                }
            }
        }
    }

    public static class State {
        public boolean init = false;
        public double range = 0;
        public boolean connected = false;
        public double anglex = 0;
        public double angley = 0;
        public double anglez = 0;
        public double ratex = 0;
        public double ratey = 0;
        public double ratez = 0;
        public final CopyOnWriteArrayList<BooleanCallback> INITIALIZED_CALLBACKS = new CopyOnWriteArrayList<>();
        public final CopyOnWriteArrayList<DoubleCallback> RANGE_CALLBACKS = new CopyOnWriteArrayList<>();public final CopyOnWriteArrayList<BooleanCallback> CONNECTED_CALLBACKS = new CopyOnWriteArrayList<>();public final CopyOnWriteArrayList<DoubleCallback> ANGLEX_CALLBACKS = new CopyOnWriteArrayList<>();public final CopyOnWriteArrayList<DoubleCallback> ANGLEY_CALLBACKS = new CopyOnWriteArrayList<>();public final CopyOnWriteArrayList<DoubleCallback> ANGLEZ_CALLBACKS = new CopyOnWriteArrayList<>();public final CopyOnWriteArrayList<DoubleCallback> RATEX_CALLBACKS = new CopyOnWriteArrayList<>();public final CopyOnWriteArrayList<DoubleCallback> RATEY_CALLBACKS = new CopyOnWriteArrayList<>();public final CopyOnWriteArrayList<DoubleCallback> RATEZ_CALLBACKS = new CopyOnWriteArrayList<>();
    }

}