plugins {
  id "com.github.node-gradle.node" version "2.2.4"
}

apply plugin: 'java-library'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'

group = 'org.carlmontrobotics'
repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile group: 'org.java-websocket', name: 'Java-WebSocket', version: '1.5.1'
    //Add SLF4J NOP Logger Binding to prevent runtime warnings
    compile group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.30'
    compile group: 'com.github.cliftonlabs', name: 'json-simple', version: '3.1.1'
    testImplementation 'junit:junit:4.13'
}

// Add a task to generate java source code for the devices using npx to run
// the asyncapi generator.
task generateDeviceFiles(type: NpxTask) {
    def outputDir = "${buildDir}/generated/sources/asyncapi/org/team199/wpiws/devices"
    def templateDir = "${projectDir}/asyncapi-template"

    // Define the command line that npx should use
  command = '@asyncapi/generator'
    args = ['--force-write', '-o', outputDir, "${templateDir}/wpilib-ws.yaml", "${templateDir}/"]

    // Define the inputs and outputs of this task so that gradle only runs it 
    // when necessary.
    inputs.files(fileTree(templateDir)).withPropertyName("templateDir")
        .withPathSensitivity(PathSensitivity.RELATIVE)
    outputs.dir(outputDir).withPropertyName("outputDir")

}

// Include the generated files in the source to compile.
sourceSets.main.java.srcDirs generateDeviceFiles.outputs

// Use a version of node and npm that is known to work.
node {
  download = true
  version = '12.19.0'
  npmVersion = '6.14.8'
}
